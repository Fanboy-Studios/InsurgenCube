<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.66"/>
    <errors>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\console.cpp" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;width&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;width&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\console.cpp" line="451"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;console::conskip&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;console::conskip&amp;#039; is not initialized in the constructor.">
            <location file="src\console.cpp" line="88"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\command.cpp" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;o&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;o&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\command.cpp" line="321"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ib1&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ib1&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ib2&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ib2&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ib3&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ib3&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ib4&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ib4&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ib5&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ib5&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ib6&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ib6&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ib7&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ib7&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ib8&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ib8&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fb1&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fb1&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fb2&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fb2&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fb3&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fb3&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fb4&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fb4&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fb5&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fb5&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fb6&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fb6&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fb7&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fb7&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fb8&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fb8&amp;#039; is assigned a value that is never used.">
            <location file="src\command.cpp" line="612"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\docs.cpp" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;width&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;width&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\docs.cpp" line="591"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;width&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;width&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\docs.cpp" line="602"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;docargument::vararg&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;docargument::vararg&amp;#039; is not initialized in the constructor.">
            <location file="src\docs.cpp" line="14"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;docsection::menu&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;docsection::menu&amp;#039; is not initialized in the constructor.">
            <location file="src\docs.cpp" line="85"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\audiomanager.cpp" line="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;audiomanager::gamemusic&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;audiomanager::gamemusic&amp;#039; is not initialized in the constructor.">
            <location file="src\audiomanager.cpp" line="15"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;pos&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;pos&amp;#039; a value by passing the value to the constructor in the initialization list.">
            <location file="src\audiomanager.cpp" line="724"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\crypto.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\crypto.cpp" line="794"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\crypto.cpp" line="806"/>
        </error>
        <error id="operatorEq" severity="style" msg="&amp;#039;bigint&amp;lt;Y_DIGITS&amp;gt;::operator=&amp;#039; should return &amp;#039;bigint&amp;lt;Y_DIGITS&amp;gt; &amp;amp;&amp;#039;." verbose="The bigint&amp;lt;Y_DIGITS&amp;gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &amp;#039;bigint&amp;lt;Y_DIGITS&amp;gt; &amp;amp;bigint&amp;lt;Y_DIGITS&amp;gt;::operator=(..) { .. return *this; }&amp;#039;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &amp;quot;Effective C++&amp;quot; by Scott Meyers.">
            <location file="src\crypto.cpp" line="218"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;q&amp;#039; should be passed by reference." verbose="Parameter &amp;#039;q&amp;#039; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="src\crypto.cpp" line="642"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;q&amp;#039; should be passed by reference." verbose="Parameter &amp;#039;q&amp;#039; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="src\crypto.cpp" line="651"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 94 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\clients2c.cpp" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file="src\clients2c.cpp" line="1647"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file="src\clients2c.cpp" line="1657"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: v - otherwise it is redundant to check it against null.">
            <location file="src\clients2c.cpp" line="1434"/>
            <location file="src\clients2c.cpp" line="1432"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\clients2c.cpp" line="230"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\clients2c.cpp" line="112"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\clients2c.cpp" line="118"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\clients2c.cpp" line="334"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 94 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\client.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\client.cpp" line="1038"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pack&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pack&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\client.cpp" line="1145"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pck&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pck&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\client.cpp" line="1179"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;notifications[1]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;notifications[1]&amp;#039; accessed at index 2, which is out of bounds.">
            <location file="src\client.cpp" line="358"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;notifications[1]&amp;#039; accessed at index 1, which is out of bounds." verbose="Array &amp;#039;notifications[1]&amp;#039; accessed at index 1, which is out of bounds.">
            <location file="src\client.cpp" line="362"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;notifications[1]&amp;#039; accessed at index 1, which is out of bounds." verbose="Array &amp;#039;notifications[1]&amp;#039; accessed at index 1, which is out of bounds.">
            <location file="src\client.cpp" line="363"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 94 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\clientgame.cpp" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: attr - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: attr - otherwise it is redundant to check it against null.">
            <location file="src\clientgame.cpp" line="289"/>
            <location file="src\clientgame.cpp" line="289"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file="src\tools.h" line="334"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\tools.h" line="456"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\tools.h" line="471"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;ringbuf&amp;lt;ENetPacket*,8&amp;gt;::data&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;ringbuf&amp;lt;ENetPacket*,8&amp;gt;::data&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="725"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;char*,sbuffer&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;char*,sbuffer&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;char*,enet_uint32&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;char*,enet_uint32&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;char*,sbuffer&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;char*,sbuffer&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;char*,enet_uint32&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;char*,enet_uint32&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;constchar*,ident&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;constchar*,ident&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;constchar*,docident&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;constchar*,docident&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;constchar*,ident&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;constchar*,ident&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;constchar*,docident&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;constchar*,docident&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;constchar*,package*&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;constchar*,package*&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;constchar*,package*&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;constchar*,package*&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;completekey,completeval*&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;completekey,completeval*&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;char*,completeval*&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;char*,completeval*&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;completekey,completeval*&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;completekey,completeval*&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;char*,completeval*&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;char*,completeval*&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;char*,userinfo&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;char*,userinfo&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;char*,userinfo&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;char*,userinfo&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;constchar*,gmenu&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;constchar*,gmenu&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;constchar*,gmenu&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;constchar*,gmenu&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;edge,unsignedshort&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;edge,unsignedshort&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;vec,int&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;vec,int&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;unsignedint,unsignedint&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;unsignedint,unsignedint&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;ivec,int&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;ivec,int&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;constchar*,model*&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;constchar*,model*&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;edge,unsignedshort&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;edge,unsignedshort&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;vec,int&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;vec,int&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;unsignedint,unsignedint&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;unsignedint,unsignedint&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;ivec,int&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;ivec,int&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;constchar*,model*&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;constchar*,model*&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;constchar*,font&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;constchar*,font&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;constchar*,font&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;constchar*,font&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;constchar*,int&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;constchar*,int&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;constchar*,int&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;constchar*,int&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;char*,Texture&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;char*,Texture&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;char*,Texture&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;char*,Texture&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;hashtable&amp;lt;constchar*,zipfile&amp;gt;::enumc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;hashtable&amp;lt;constchar*,zipfile&amp;gt;::enumc&amp;#039; is not initialized in the constructor.">
            <location file="src\tools.h" line="611"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct hashtable&amp;lt;constchar*,zipfile&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct hashtable&amp;lt;constchar*,zipfile&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\tools.h" line="591"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;line&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;line&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\protos.h" line="1096"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;gmenu::mwidth&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;gmenu::mwidth&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="164"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;gmenu::menusel&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;gmenu::menusel&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="164"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;gmenu::allowinput&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;gmenu::allowinput&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="164"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;gmenu::inited&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;gmenu::inited&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="164"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;gmenu::hotkeys&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;gmenu::hotkeys&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="164"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;gmenu::forwardkeys&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;gmenu::forwardkeys&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="164"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;gmenu::refreshfunc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;gmenu::refreshfunc&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="164"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;gmenu::keyfunc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;gmenu::keyfunc&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="164"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;gmenu::anim&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;gmenu::anim&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="164"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;gmenu::rotspeed&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;gmenu::rotspeed&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="164"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;gmenu::scale&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;gmenu::scale&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="164"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;serverinfo::cmd&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;serverinfo::cmd&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="217"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;serverinfo::menuline_from&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;serverinfo::menuline_from&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="217"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;serverinfo::menuline_to&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;serverinfo::menuline_to&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="217"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;serverinfo::namedata&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;serverinfo::namedata&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="217"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;serverinfo::textdata&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;serverinfo::textdata&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="217"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;votedisplayinfo::type&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;votedisplayinfo::type&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="465"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;votedisplayinfo::desc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;votedisplayinfo::desc&amp;#039; is not initialized in the constructor.">
            <location file="src\protos.h" line="465"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;physent::maxspeed&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;physent::maxspeed&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="201"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;physent::radius&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;physent::radius&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="201"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;physent::eyeheight&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;physent::eyeheight&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="201"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;physent::maxeyeheight&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;physent::maxeyeheight&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="201"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;physent::aboveeye&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;physent::aboveeye&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="201"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;physent::type&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;physent::type&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="201"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;playerstate::health&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;playerstate::health&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="322"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;playerstate::lastspawn&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;playerstate::lastspawn&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="322"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;playerstate::lastregen&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;playerstate::lastregen&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="322"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;playerstate::gunselect&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;playerstate::gunselect&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="322"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;playerstate::ammo&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;playerstate::ammo&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="322"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;playerstate::mag&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;playerstate::mag&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="322"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;playerstate::gunwait&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;playerstate::gunwait&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="322"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;playerstate::pstatshots&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;playerstate::pstatshots&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="322"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;playerstate::pstatdamage&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;playerstate::pstatdamage&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="322"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;flaginfo::team&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;flaginfo::team&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="785"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;flaginfo::actor_cn&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;flaginfo::actor_cn&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="785"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;bounceent::millis&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;bounceent::millis&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="800"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;bounceent::timetolive&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;bounceent::timetolive&amp;#039; is not initialized in the constructor.">
            <location file="src\entity.h" line="800"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference">
            <location file="src\entity.h" line="342"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file="src\bot\bot_util.h" line="458"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file="src\bot\bot_util.h" line="201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pTemp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pTemp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_util.h" line="370"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pTemp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pTemp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_util.h" line="208"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;TPriorList&amp;lt;waypoint_s*,float&amp;gt;::iNodeCount&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;TPriorList&amp;lt;waypoint_s*,float&amp;gt;::iNodeCount&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot_util.h" line="311"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;node_s::Entry&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;node_s::Entry&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot_util.h" line="43"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;class TMultiChoice&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;class TMultiChoice&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\bot\bot_util.h" line="472"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;SMultiChoice::Choice&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;SMultiChoice::Choice&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot_util.h" line="479"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;class TMultiChoice&amp;lt;int&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;class TMultiChoice&amp;lt;int&amp;gt;&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\bot\bot_util.h" line="472"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;CBotManager::m_szBotNames&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;CBotManager::m_szBotNames&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot.h" line="350"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;CBotManager::m_sBotNameCount&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;CBotManager::m_sBotNameCount&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot.h" line="350"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;CBotManager::m_bBotsShoot&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;CBotManager::m_bBotsShoot&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot.h" line="350"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;CBotManager::m_bIdleBots&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;CBotManager::m_bIdleBots&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot.h" line="350"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;CBotManager::m_iFrameTime&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;CBotManager::m_iFrameTime&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot.h" line="350"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;CBotManager::m_iPrevTime&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;CBotManager::m_iPrevTime&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot.h" line="350"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;CBotManager::m_sMaxAStarBots&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;CBotManager::m_sMaxAStarBots&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot.h" line="350"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;CBotManager::m_sUsingAStarBotsCount&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;CBotManager::m_sUsingAStarBotsCount&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot.h" line="350"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;CBotManager::m_sCurrentTriggerNr&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;CBotManager::m_sCurrentTriggerNr&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot.h" line="350"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\editing.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\editing.cpp" line="689"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\entities.cpp" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;o&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;o&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\entities.cpp" line="337"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\i18n.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 94 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\log.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\main.cpp" line="0"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;flags&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;flags&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src\main.cpp" line="539"/>
            <location file="src\main.cpp" line="541"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\master.cpp" line="0"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;client::input&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;client::input&amp;#039; is not initialized in the constructor.">
            <location file="src\master.cpp" line="167"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\master.cpp" line="571"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\master.cpp" line="582"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\master.cpp" line="586"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\menus.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\menus.cpp" line="62"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\menus.cpp" line="118"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\menus.cpp" line="899"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\menus.cpp" line="915"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\menus.cpp" line="921"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\menus.cpp" line="927"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\menus.cpp" line="933"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\menus.cpp" line="949"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\menus.cpp" line="966"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\menus.cpp" line="1148"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\menus.cpp" line="1513"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;mitemslider::curval&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;mitemslider::curval&amp;#039; is not initialized in the constructor.">
            <location file="src\menus.cpp" line="588"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpegenc.h" line="410"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpegenc.h" line="658"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;startpos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;startpos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpegenc.h" line="744"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nrzeroes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nrzeroes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\jpegenc.h" line="746"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &amp;#039;i&amp;#039; is used before limits check." verbose="Defensive programming: The variable &amp;#039;i&amp;#039; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &amp;#039;(a[i] &amp;amp;&amp;amp; i &amp;lt; 10)&amp;#039; to &amp;#039;(i &amp;lt; 10 &amp;amp;&amp;amp; a[i])&amp;#039;. That way the array will not be accessed if the index is out of limits.">
            <location file="src\jpegenc.h" line="764"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::YDC_HT&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::YDC_HT&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::CbDC_HT&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::CbDC_HT&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::YAC_HT&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::YAC_HT&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::CbAC_HT&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::CbAC_HT&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::category_alloc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::category_alloc&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::category&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::category&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::bitcode_alloc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::bitcode_alloc&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::bitcode&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::bitcode&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::YRtab&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::YRtab&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::YGtab&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::YGtab&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::YBtab&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::YBtab&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::CbRtab&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::CbRtab&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::CbGtab&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::CbGtab&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::CbBtab&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::CbBtab&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::CrRtab&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::CrRtab&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::CrGtab&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::CrGtab&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::CrBtab&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::CrBtab&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::fdtbl_Y&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::fdtbl_Y&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::fdtbl_Cb&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::fdtbl_Cb&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::YDU&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::YDU&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::CbDU&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::CbDU&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::CrDU&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::CrDU&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::DU_DCT&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::DU_DCT&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::DU&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::DU&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::RGB_buffer&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::RGB_buffer&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::width&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::width&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::height&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::height&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;jpegenc::fp_jpeg_stream&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;jpegenc::fp_jpeg_stream&amp;#039; is not initialized in the constructor.">
            <location file="src\jpegenc.h" line="227"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\oggstream.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\oggstream.cpp" line="11"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\oggstream.cpp" line="17"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\oggstream.cpp" line="23"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\oggstream.cpp" line="31"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\openal.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\packetqueue.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\pch.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\physics.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="197"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="409"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="418"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="477"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="517"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="612"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="627"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="705"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="706"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="734"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="741"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\physics.cpp" line="745"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dz&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dz&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\physics.cpp" line="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fdx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fdx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\physics.cpp" line="1034"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fdy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fdy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\physics.cpp" line="1034"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\protocol.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\rendergl.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\rendergl.cpp" line="503"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\rendergl.cpp" line="699"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\rendergl.cpp" line="770"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\rendergl.cpp" line="1217"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;wfogc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;wfogc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\rendergl.cpp" line="1300"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\rendercubes.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\renderhud.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\renderhud.cpp" line="710"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\renderhud.cpp" line="873"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\renderhud.cpp" line="1019"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\renderhud.cpp" line="588"/>
        </error>
        <error id="zerodivcond" severity="warning" msg="Either the condition &amp;#039;gdim==0&amp;#039; is useless or there is division by zero at line 648." verbose="Either the condition &amp;#039;gdim==0&amp;#039; is useless or there is division by zero at line 648.">
            <location file="src\renderhud.cpp" line="651"/>
            <location file="src\renderhud.cpp" line="648"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\rendermodel.cpp" line="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;varseed&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;varseed&amp;#039; is assigned a value that is never used.">
            <location file="src\rendermodel.cpp" line="660"/>
        </error>
        <error id="leakNoVarFunctionCall" severity="error" msg="Allocation with newstring, access doesn&amp;#039;t release it." verbose="Allocation with newstring, access doesn&amp;#039;t release it.">
            <location file="src\rendermodel.cpp" line="147"/>
        </error>
        <error id="leakNoVarFunctionCall" severity="error" msg="Allocation with newstring, access doesn&amp;#039;t release it." verbose="Allocation with newstring, access doesn&amp;#039;t release it.">
            <location file="src\rendermodel.cpp" line="160"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\renderparticles.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\rendertext.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="90"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="105"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="115"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="135"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="144"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="52"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="56"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="61"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="20"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="21"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="28"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="29"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\modelcache.h" line="41"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\vertmodel.h" line="99"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\vertmodel.h" line="121"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;mesh::numverts&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;mesh::numverts&amp;#039; is not initialized in the constructor.">
            <location file="src\vertmodel.h" line="150"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;mesh::numtris&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;mesh::numtris&amp;#039; is not initialized in the constructor.">
            <location file="src\vertmodel.h" line="150"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;mesh::dynlen&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;mesh::dynlen&amp;#039; is not initialized in the constructor.">
            <location file="src\vertmodel.h" line="150"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;mesh::numdyndraws&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;mesh::numdyndraws&amp;#039; is not initialized in the constructor.">
            <location file="src\vertmodel.h" line="150"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;mesh::statlen&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;mesh::statlen&amp;#039; is not initialized in the constructor.">
            <location file="src\vertmodel.h" line="150"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;tag::transform&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;tag::transform&amp;#039; is not initialized in the constructor.">
            <location file="src\vertmodel.h" line="612"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;part::model&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;part::model&amp;#039; is not initialized in the constructor.">
            <location file="src\vertmodel.h" line="654"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;part::index&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;part::index&amp;#039; is not initialized in the constructor.">
            <location file="src\vertmodel.h" line="654"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;part::numframes&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;part::numframes&amp;#039; is not initialized in the constructor.">
            <location file="src\vertmodel.h" line="654"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\md2.h" line="219"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\md2.h" line="234"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\md3.h" line="162"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\rndmap.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\scoreboard.cpp" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\scoreboard.cpp" line="434"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\scoreboard.cpp" line="447"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\scoreboard.cpp" line="452"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 96 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\server.cpp" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: v - otherwise it is redundant to check it against null.">
            <location file="src\server.cpp" line="2608"/>
            <location file="src\server.cpp" line="2615"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: v - otherwise it is redundant to check it against null.">
            <location file="src\server.cpp" line="2632"/>
            <location file="src\server.cpp" line="2615"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2650"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2651"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2654"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2655"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2656"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2659"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2662"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2665"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2666"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2669"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2670"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2673"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2674"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2675"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2678"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2681"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2684"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2687"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2690"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\server.cpp" line="2693"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;besth&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;besth&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp" line="2095"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp" line="2095"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bestdiff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bestdiff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp" line="2096"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bestpair&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bestpair&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp" line="2096"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp" line="3021"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp" line="3363"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp" line="5234"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp" line="5235"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp" line="5236"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;To make it crash, type in more than 5 characters.">
            <location file="src\server.cpp" line="5236"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;To make it crash, type in more than 5 characters.">
            <location file="src\server.cpp" line="5238"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp" line="719"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp" line="790"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp" line="792"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 97 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\server.cpp.BASE.cpp" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: v - otherwise it is redundant to check it against null.">
            <location file="src\server.cpp.BASE.cpp" line="2259"/>
            <location file="src\server.cpp.BASE.cpp" line="2236"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: v - otherwise it is redundant to check it against null.">
            <location file="src\server.cpp.BASE.cpp" line="2260"/>
            <location file="src\server.cpp.BASE.cpp" line="2236"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;besth&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;besth&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.BASE.cpp" line="1749"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.BASE.cpp" line="1749"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bestdiff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bestdiff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.BASE.cpp" line="1750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bestpair&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bestpair&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.BASE.cpp" line="1750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.BASE.cpp" line="2622"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.BASE.cpp" line="2711"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cp&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.BASE.cpp" line="2964"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;x&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.BASE.cpp" line="3642"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;y&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;y&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.BASE.cpp" line="3643"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xs&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xs&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.BASE.cpp" line="3644"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ys&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ys&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.BASE.cpp" line="3645"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;v&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;v&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.BASE.cpp" line="3646"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;offset&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;offset&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.BASE.cpp" line="3651"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;low&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;low&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.BASE.cpp" line="3668"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hi&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hi&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.BASE.cpp" line="3668"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::state&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::state&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.BASE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::pos&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::pos&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.BASE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::lastupdate&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::lastupdate&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.BASE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::stolentime&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::stolentime&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.BASE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::x&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::x&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.BASE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::y&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::y&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.BASE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::num1&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::num1&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.BASE.cpp" line="2133"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::num2&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::num2&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.BASE.cpp" line="2133"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::type&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::type&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.BASE.cpp" line="2133"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::text&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::text&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.BASE.cpp" line="2133"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp.BASE.cpp" line="4284"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp.BASE.cpp" line="4285"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp.BASE.cpp" line="4286"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;To make it crash, type in more than 5 characters.">
            <location file="src\server.cpp.BASE.cpp" line="4286"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;To make it crash, type in more than 5 characters.">
            <location file="src\server.cpp.BASE.cpp" line="4288"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp.BASE.cpp" line="610"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp.BASE.cpp" line="681"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp.BASE.cpp" line="683"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: nextprimary &amp;lt; 0 &amp;amp;&amp;amp; nextprimary &amp;gt;= 14." verbose="Logical conjunction always evaluates to false: nextprimary &amp;lt; 0 &amp;amp;&amp;amp; nextprimary &amp;gt;= 14. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?">
            <location file="src\server.cpp.BASE.cpp" line="2973"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverfiles.h" line="321"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverfiles.h" line="429"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverfiles.h" line="513"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverfiles.h" line="584"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverfiles.h" line="685"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverfiles.h" line="753"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverfiles.h" line="835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;servermapbuffer::mapname&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;servermapbuffer::mapname&amp;#039; is not initialized in the constructor.">
            <location file="src\serverfiles.h" line="17"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;servermapbuffer::cgzsize&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;servermapbuffer::cgzsize&amp;#039; is not initialized in the constructor.">
            <location file="src\serverfiles.h" line="17"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;servermapbuffer::cfgsize&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;servermapbuffer::cfgsize&amp;#039; is not initialized in the constructor.">
            <location file="src\serverfiles.h" line="17"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;servermapbuffer::cfgsizegz&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;servermapbuffer::cfgsizegz&amp;#039; is not initialized in the constructor.">
            <location file="src\serverfiles.h" line="17"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;servermapbuffer::revision&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;servermapbuffer::revision&amp;#039; is not initialized in the constructor.">
            <location file="src\serverfiles.h" line="17"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;servermapbuffer::datasize&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;servermapbuffer::datasize&amp;#039; is not initialized in the constructor.">
            <location file="src\serverfiles.h" line="17"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&amp;#039;struct servermapbuffer&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&amp;#039;struct servermapbuffer&amp;#039; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="src\serverfiles.h" line="11"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;To make it crash, type in more than 5 characters.">
            <location file="src\serverfiles.h" line="670"/>
        </error>
        <error id="leakNoVarFunctionCall" severity="error" msg="Allocation with newstring, access doesn&amp;#039;t release it." verbose="Allocation with newstring, access doesn&amp;#039;t release it.">
            <location file="src\serverfiles.h" line="526"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dz&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dz&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverworld.h" line="147"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;area&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;area&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverchecks.h" line="133"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;area&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;area&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverchecks.h" line="143"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;zombies_suicide&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;zombies_suicide&amp;#039; is assigned a value that is never used.">
            <location file="src\serverai.h" line="128"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;zombies_suicide_given&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;zombies_suicide_given&amp;#039; is assigned a value that is never used.">
            <location file="src\serverai.h" line="129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;shotevent::compact&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;shotevent::compact&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="49"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::lastdeath&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::lastdeath&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::lifesequence&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::lifesequence&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::forced&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::forced&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::lastshot&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::lastshot&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::lastkill&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::lastkill&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::combo&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::combo&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::akimbomillis&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::akimbomillis&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::crouchmillis&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::crouchmillis&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::scopemillis&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::scopemillis&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::drownmillis&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::drownmillis&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::drownval&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::drownval&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::scoped&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::scoped&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::crouching&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::crouching&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::onfloor&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::onfloor&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::fallz&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::fallz&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::flagscore&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::flagscore&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::frags&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::frags&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::teamkills&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::teamkills&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::deaths&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::deaths&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::shotdamage&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::shotdamage&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::damage&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::damage&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::points&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::points&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::events&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::events&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::lastdisc&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::lastdisc&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;clientstate::reconnections&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;clientstate::reconnections&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::state&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::state&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="466"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::drop_cn&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::drop_cn&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="466"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::dropmillis&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::dropmillis&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="466"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::pos&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::pos&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="466"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::lastupdate&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::lastupdate&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="466"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::stolentime&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::stolentime&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="466"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::x&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::x&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="466"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::y&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::y&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="466"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;projectilestate&amp;lt;6&amp;gt;::projs&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;projectilestate&amp;lt;6&amp;gt;::projs&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="106"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;projectilestate&amp;lt;3&amp;gt;::projs&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;projectilestate&amp;lt;3&amp;gt;::projs&amp;#039; is not initialized in the constructor.">
            <location file="src\server.h" line="106"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;to&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;to&amp;#039; a value by passing the value to the constructor in the initialization list.">
            <location file="src\server.h" line="49"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 97 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\server.cpp.LOCAL.cpp" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: v - otherwise it is redundant to check it against null.">
            <location file="src\server.cpp.LOCAL.cpp" line="2259"/>
            <location file="src\server.cpp.LOCAL.cpp" line="2236"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: v - otherwise it is redundant to check it against null.">
            <location file="src\server.cpp.LOCAL.cpp" line="2260"/>
            <location file="src\server.cpp.LOCAL.cpp" line="2236"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;besth&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;besth&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.LOCAL.cpp" line="1749"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.LOCAL.cpp" line="1749"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bestdiff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bestdiff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.LOCAL.cpp" line="1750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bestpair&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bestpair&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.LOCAL.cpp" line="1750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.LOCAL.cpp" line="2622"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.LOCAL.cpp" line="2711"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cp&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.LOCAL.cpp" line="2954"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cp&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.LOCAL.cpp" line="2981"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;x&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.LOCAL.cpp" line="3659"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;y&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;y&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.LOCAL.cpp" line="3660"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xs&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xs&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.LOCAL.cpp" line="3661"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ys&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ys&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.LOCAL.cpp" line="3662"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;v&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;v&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.LOCAL.cpp" line="3663"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;offset&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;offset&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.LOCAL.cpp" line="3668"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;low&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;low&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.LOCAL.cpp" line="3685"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hi&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hi&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.LOCAL.cpp" line="3685"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::state&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::state&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.LOCAL.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::pos&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::pos&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.LOCAL.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::lastupdate&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::lastupdate&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.LOCAL.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::stolentime&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::stolentime&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.LOCAL.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::x&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::x&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.LOCAL.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::y&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::y&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.LOCAL.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::num1&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::num1&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.LOCAL.cpp" line="2133"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::num2&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::num2&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.LOCAL.cpp" line="2133"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::type&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::type&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.LOCAL.cpp" line="2133"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::text&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::text&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.LOCAL.cpp" line="2133"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp.LOCAL.cpp" line="4301"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp.LOCAL.cpp" line="4302"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp.LOCAL.cpp" line="4303"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;To make it crash, type in more than 5 characters.">
            <location file="src\server.cpp.LOCAL.cpp" line="4303"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;To make it crash, type in more than 5 characters.">
            <location file="src\server.cpp.LOCAL.cpp" line="4305"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp.LOCAL.cpp" line="610"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp.LOCAL.cpp" line="681"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp.LOCAL.cpp" line="683"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: nextprimary &amp;lt; 0 &amp;amp;&amp;amp; nextprimary &amp;gt;= 14." verbose="Logical conjunction always evaluates to false: nextprimary &amp;lt; 0 &amp;amp;&amp;amp; nextprimary &amp;gt;= 14. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?">
            <location file="src\server.cpp.LOCAL.cpp" line="2990"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 97 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\server.cpp.REMOTE.cpp" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: v - otherwise it is redundant to check it against null.">
            <location file="src\server.cpp.REMOTE.cpp" line="2259"/>
            <location file="src\server.cpp.REMOTE.cpp" line="2236"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: v - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: v - otherwise it is redundant to check it against null.">
            <location file="src\server.cpp.REMOTE.cpp" line="2260"/>
            <location file="src\server.cpp.REMOTE.cpp" line="2236"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;besth&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;besth&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.REMOTE.cpp" line="1749"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.REMOTE.cpp" line="1749"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bestdiff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bestdiff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.REMOTE.cpp" line="1750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bestpair&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bestpair&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.REMOTE.cpp" line="1750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.REMOTE.cpp" line="2622"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\server.cpp.REMOTE.cpp" line="2711"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cp&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.REMOTE.cpp" line="2964"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;x&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.REMOTE.cpp" line="3642"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;y&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;y&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.REMOTE.cpp" line="3643"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;xs&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;xs&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.REMOTE.cpp" line="3644"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ys&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ys&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.REMOTE.cpp" line="3645"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;v&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;v&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.REMOTE.cpp" line="3646"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;offset&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;offset&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.REMOTE.cpp" line="3651"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;low&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;low&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.REMOTE.cpp" line="3668"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hi&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hi&amp;#039; is assigned a value that is never used.">
            <location file="src\server.cpp.REMOTE.cpp" line="3668"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::state&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::state&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.REMOTE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::pos&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::pos&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.REMOTE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::lastupdate&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::lastupdate&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.REMOTE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::stolentime&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::stolentime&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.REMOTE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::x&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::x&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.REMOTE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sflaginfo::y&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sflaginfo::y&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.REMOTE.cpp" line="867"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::num1&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::num1&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.REMOTE.cpp" line="2133"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::num2&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::num2&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.REMOTE.cpp" line="2133"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::type&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::type&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.REMOTE.cpp" line="2133"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;voteinfo::text&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;voteinfo::text&amp;#039; is not initialized in the constructor.">
            <location file="src\server.cpp.REMOTE.cpp" line="2133"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp.REMOTE.cpp" line="4284"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp.REMOTE.cpp" line="4285"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\server.cpp.REMOTE.cpp" line="4286"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;To make it crash, type in more than 5 characters.">
            <location file="src\server.cpp.REMOTE.cpp" line="4286"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;To make it crash, type in more than 5 characters.">
            <location file="src\server.cpp.REMOTE.cpp" line="4288"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp.REMOTE.cpp" line="610"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp.REMOTE.cpp" line="681"/>
        </error>
        <error id="obsoleteFunctionsasctime" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use the function &amp;#039;strftime&amp;#039; instead.">
            <location file="src\server.cpp.REMOTE.cpp" line="683"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\serverbrowser.cpp" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: menu - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: menu - otherwise it is redundant to check it against null.">
            <location file="src\serverbrowser.cpp" line="1160"/>
            <location file="src\serverbrowser.cpp" line="1161"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="218"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="230"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="1001"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="1004"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="1046"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="1107"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="1134"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="1145"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="1160"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="1195"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="1254"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\serverbrowser.cpp" line="1296"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverbrowser.cpp" line="257"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ts&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ts&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverbrowser.cpp" line="572"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverbrowser.cpp" line="572"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;title&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;title&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\serverbrowser.cpp" line="941"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\serverms.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\shadow.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\sound.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\soundlocation.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\soundlocation.cpp" line="129"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\soundscheduler.cpp" line="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: src - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: src - otherwise it is redundant to check it against null.">
            <location file="src\soundscheduler.cpp" line="147"/>
            <location file="src\soundscheduler.cpp" line="149"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;sourcescheduler::numsoundchannels&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;sourcescheduler::numsoundchannels&amp;#039; is not initialized in the constructor.">
            <location file="src\soundscheduler.cpp" line="16"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\stream.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\stream.cpp" line="348"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\stream.cpp" line="355"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\stream.cpp" line="361"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: from" verbose="Resource leak: from">
            <location file="src\stream.cpp" line="318"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: dest" verbose="Resource leak: dest">
            <location file="src\stream.cpp" line="318"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\texture.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\tools.cpp" line="0"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\tools.cpp" line="396"/>
        </error>
        <error id="invalidscanf" severity="portability" msg="scanf without field width limits can crash with huge input data on some versions of libc." verbose="scanf without field width limits can crash with huge input data on libc versions older than 2.13-25. Add a field width specifier to fix this problem:&#10;    %i =&amp;gt; %3i&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    int a;&#10;    scanf(&amp;quot;%i&amp;quot;, &amp;amp;a);&#10;    return 0;&#10;}&#10;&#10;To make it crash:&#10;perl -e &amp;#039;print &amp;quot;5&amp;quot;x2100000&amp;#039; | ./a.out">
            <location file="src\tools.cpp" line="418"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\water.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 94 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\weapon.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\weapon.cpp" line="319"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\weapon.cpp" line="630"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\weapon.cpp" line="1013"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\weapon.cpp" line="1331"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;filter1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;filter1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\weapon.cpp" line="1067"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;filter2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;filter2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\weapon.cpp" line="1067"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;weapon::lastaction&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;weapon::lastaction&amp;#039; is not initialized in the constructor.">
            <location file="src\weapon.cpp" line="480"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;progress&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;progress&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\hudgun.h" line="71"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\wizard.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 94 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\world.cpp" line="0"/>
        </error>
        <error id="redundantAssignInSwitch" severity="warning" msg="Variable &amp;#039;attr2&amp;#039; is reassigned a value before the old one has been used. &amp;#039;break;&amp;#039; missing?" verbose="Variable &amp;#039;attr2&amp;#039; is reassigned a value before the old one has been used. &amp;#039;break;&amp;#039; missing?">
            <location file="src\world.cpp" line="288"/>
            <location file="src\world.cpp" line="291"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bcnt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bcnt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\world.cpp" line="134"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\worldio.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\worldio.cpp" line="389"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\worldlight.cpp" line="0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\worldlight.cpp" line="333"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="src\worldlight.cpp" line="335"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\worldocull.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\worldrender.cpp" line="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 93 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.">
            <location file="src\zip.cpp" line="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;src&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;src&amp;#039; is assigned a value that is never used.">
            <location file="src\zip.cpp" line="102"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;src&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;src&amp;#039; is assigned a value that is never used.">
            <location file="src\zip.cpp" line="187"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buf" verbose="Uninitialized variable: buf">
            <location file="src\zip.cpp" line="85"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sWeaponScore&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sWeaponScore&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\ac_bot_ai.cpp" line="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sScore&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sScore&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\ac_bot_ai.cpp" line="149"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sScore&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sScore&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\ac_bot_ai.cpp" line="293"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;sHighestScore&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;sHighestScore&amp;#039; is assigned a value that is never used.">
            <location file="src\bot\ac_bot_ai.cpp" line="261"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;bot_skill_s::flAlwaysDetectDistance&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;bot_skill_s::flAlwaysDetectDistance&amp;#039; is not initialized in the constructor.">
            <location file="src\bot\bot.cpp" line="21"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="src\bot\bot_ai.cpp" line="766"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bSearchItems&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bSearchItems&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_ai.cpp" line="1020"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flDist&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flDist&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_ai.cpp" line="1599"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;WallLeft&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;WallLeft&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_ai.cpp" line="1600"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;curr_height&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;curr_height&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_ai.cpp" line="1974"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last_height&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last_height&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_ai.cpp" line="1974"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;flNearestDist&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;flNearestDist&amp;#039; is assigned a value that is never used.">
            <location file="src\bot\bot_ai.cpp" line="205"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;BestEnemyVal&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;BestEnemyVal&amp;#039; is assigned a value that is never used.">
            <location file="src\bot\bot_ai.cpp" line="211"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;flNearestDist&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;flNearestDist&amp;#039; is assigned a value that is never used.">
            <location file="src\bot\bot_ai.cpp" line="356"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;BestEnemyVal&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;BestEnemyVal&amp;#039; is assigned a value that is never used.">
            <location file="src\bot\bot_ai.cpp" line="408"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;flNearestDist&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;flNearestDist&amp;#039; is assigned a value that is never used.">
            <location file="src\bot\bot_ai.cpp" line="2118"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_waypoint.cpp" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_waypoint.cpp" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_waypoint.cpp" line="380"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_waypoint.cpp" line="380"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;waypoint2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;waypoint2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_waypoint.cpp" line="906"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;waypoint2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;waypoint2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_waypoint.cpp" line="947"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;curr_height&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;curr_height&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_waypoint.cpp" line="988"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last_height&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last_height&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\bot_waypoint.cpp" line="988"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;DirSeperator&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;DirSeperator&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src\bot\botmanager.cpp" line="282"/>
        </error>
    </errors>
</results>
